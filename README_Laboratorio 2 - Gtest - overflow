//Repositorio de prácticas para Diseño y Programación Seguras (ULE) -----> IGNACIO NIETO VIDAURRÁZAGA - inietv00@estudiantes.unileon.es

********   My CONFIGURATION ************

┌──(kali㉿localhost)-[~]
└─$ uname -a
Linux localhost 4.14.94+ #1 SMP PREEMPT Tue Dec 10 20:39:11 WIB 2019 aarch64 GNU/Linux


┌──(kali㉿localhost)-[~]
└─$ grep VERSION /etc/os-release
VERSION="2021.2"
VERSION_ID="2021.2"
VERSION_CODENAME="kali-rolling"




-------    GENERIC NOTES   --------

//I received a warning as it is shown below

CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of CMake.
  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


//this could be fixed by suggesting the system the availability of newer versions
cmake_minimum_required(VERSION 2.8...3.13)


//we could set an specific standard either in C or C++
set(CMAKE_C_FLAGS "std=c99")

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")



//Although the good compilation and linking made by cmake we should unify de code by changing the libraries and adapting from C to C++ like this:

#include <math.h> --> #include <cmath>
#include <limits.h> --> #include <climits>
#include <stdio.h> --> #include <cstdio>
#include <stdint.h> --> #include <cstdint> 

//The other possibility would be to change the extension from exampleFunction.cpp to exampleFunction.c





-------    WHEN EXECUTING   ---------

//It is obtained the following output when we run runTests:

[==========] Running 6 tests from 3 test suites.
[----------] Global test environment set-up.
[----------] 2 tests from wrapAddFunctionTest
[ RUN      ] wrapAddFunctionTest.NonWrappingNums
[       OK ] wrapAddFunctionTest.NonWrappingNums (0 ms)
[ RUN      ] wrapAddFunctionTest.WrappingNums
[       OK ] wrapAddFunctionTest.WrappingNums (0 ms)
[----------] 2 tests from wrapAddFunctionTest (1 ms total)

[----------] 2 tests from wrapMulFunctionTest
[ RUN      ] wrapMulFunctionTest.NonWrappingMulNums
[       OK ] wrapMulFunctionTest.NonWrappingMulNums (0 ms)
[ RUN      ] wrapMulFunctionTest.WrappingMulNums
[       OK ] wrapMulFunctionTest.WrappingMulNums (0 ms)
[----------] 2 tests from wrapMulFunctionTest (1 ms total)

[----------] 2 tests from wrapShiftFunctionTest
[ RUN      ] wrapShiftFunctionTest.NonWrappingMulBNums
[       OK ] wrapShiftFunctionTest.NonWrappingMulBNums (0 ms)
[ RUN      ] wrapShiftFunctionTest.WrappingMulBNums
[       OK ] wrapShiftFunctionTest.WrappingMulBNums (0 ms)
[----------] 2 tests from wrapShiftFunctionTest (1 ms total)

[----------] Global test environment tear-down
[==========] 6 tests from 3 test suites ran. (4 ms total)
[  PASSED  ] 6 tests.

//as we can see it passed all de gtests although there where some integer and shift overflows
//The strange output can be obtained simply compiling and running the following (I've omited the correct results)


resultado = wrapFunctionAdd(UINT_MAX, 1);
	cout << resultado << endl;

resultado = wrapFunctionMul(UINT_MAX, UINT_MAX);
	cout << resultado << endl;
	

resultado = wrapFunctionShift(UINT_MAX, 12);
	cout << resultado << endl;


resultado = wrapFunctionShiftIzq(UINT_MAX, 12);
	cout << resultado << endl;


resultado = wrapFunctionShiftDch(UINT_MAX, 12);
	cout << resultado << endl;
	
RESULTS:
		0
		1
		-4096
		4095
		-1
	

Since UINT_MAX= 4294967295 
0   --> Its clear that 4294967295 + 1 it is not 0 so there is an overflow
1  --> 4294967295 * 4294967295 ....  overflow



In order to analyze the shift function, I split it into 2 shift functions (one shifting to the left and the other to the right) 
both functions are separed with the operator  | that is an inclusive OR  bit by bit	|	bitor

So:
uShiftIzq = ui_a << ui_b --> 1111 1111 1111 1111 1111 1111 1111 1111 even only one shift produces overflow, so this shift gives us a strange result (-4096)
uShiftDch = ui_a >> (32 - ui_b); --> In this case it shifts 20 positions so it overflows again (we obtain 4095, that is an anomalous result) 

When aplying the inclusive OR on the two shifts we also receive a bad result (-1)





